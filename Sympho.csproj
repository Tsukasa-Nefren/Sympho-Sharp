<Project Sdk="Microsoft.NET.Sdk">

  <!-- 
    Project Configuration for Sympho
    This file defines dependencies and custom build steps.
    Key features include:
    - Automatic download of yt-dlp and ffmpeg on Windows builds.
    - Creation of necessary directory structures (lang, sounds, sympho_tmp).
  -->

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>

    <!-- This ensures that dependency DLLs (like Newtonsoft.Json) are copied to the output folder. -->
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>

    <!-- External tool download URLs -->
    <YtDlpUrl>https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe</YtDlpUrl>
    <FfmpegZipUrl>https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip</FfmpegZipUrl>
  </PropertyGroup>

  <ItemGroup>
    <!-- The CounterStrikeSharp.API is provided by the server environment, so we exclude it from the runtime assets. -->
    <PackageReference Include="CounterStrikeSharp.API" Version="1.0.337">
      <ExcludeAssets>runtime</ExcludeAssets>
    </PackageReference>

    <!-- External libraries required by the plugin. -->
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
    <PackageReference Include="YoutubeDLSharp" Version="1.1.2" />
  </ItemGroup>

  <!-- This section ensures that resource files are copied to the build output directory. -->
  <ItemGroup>
    <Content Include="lang\**\*">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <Content Include="sounds\**\*">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <!-- 
    ==========================================================================================
    CUSTOM BUILD TARGETS: Automatic Tool Fetcher for Windows
    ==========================================================================================
    The following targets automate the download of yt-dlp and ffmpeg for Windows users.
    
    ATTENTION LINUX/MACOS USERS: 
    These scripts will not run on your system. You must manually download 'yt-dlp' and 'ffmpeg' 
    and place the executables in the plugin's root directory (next to Sympho.dll).
    ==========================================================================================
  -->

  <!-- STEP 1: Dynamically create a PowerShell script file during the build process. -->
  <Target Name="PrepareToolsScript" BeforeTargets="Build" Condition="'$(OS)' == 'Windows_NT'">
    <PropertyGroup>
      <ToolsPs1>$(IntermediateOutputPath)download-tools.ps1</ToolsPs1>
    </PropertyGroup>

    <ItemGroup>
      <Ps1Lines Include="$ErrorActionPreference = 'Stop'" />
      <Ps1Lines Include="[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12" />
      <Ps1Lines Include="$ToolsDir = (Get-Location).ProviderPath" />
      <Ps1Lines Include="Write-Host &quot;[FetchTools] Working Directory: $ToolsDir&quot;" />
      <Ps1Lines Include="$yt  = Join-Path $ToolsDir 'yt-dlp.exe'" />
      <Ps1Lines Include="$ff  = Join-Path $ToolsDir 'ffmpeg.exe'" />
      <Ps1Lines Include="$zip = Join-Path $ToolsDir 'ffmpeg.zip'" />
      <Ps1Lines Include="$unz = Join-Path $ToolsDir 'ffmpeg_zip'" />
      
      <!-- Download yt-dlp -->
      <Ps1Lines Include="if (Test-Path $yt) { Write-Host '[FetchTools] yt-dlp.exe already exists. Skipping.' } else {" />
      <Ps1Lines Include="  Write-Host '[FetchTools] Downloading yt-dlp...'" />
      <Ps1Lines Include="  try { Invoke-WebRequest -Uri '$(YtDlpUrl)' -OutFile $yt -UseBasicParsing -TimeoutSec 120 } catch { Write-Host (&quot;[FetchTools] WARNING: Failed to download yt-dlp: {0}&quot; -f $_.Exception.Message) }" />
      <Ps1Lines Include="}" />

      <!-- Download and extract ffmpeg -->
      <Ps1Lines Include="if (Test-Path $ff) { Write-Host '[FetchTools] ffmpeg.exe already exists. Skipping.' } else {" />
      <Ps1Lines Include="  Write-Host '[FetchTools] Downloading ffmpeg...'" />
      <Ps1Lines Include="  try {" />
      <Ps1Lines Include="    if (Test-Path $unz) { Remove-Item $unz -Recurse -Force }" />
      <Ps1Lines Include="    if (Test-Path $zip) { Remove-Item $zip -Force }" />
      <Ps1Lines Include="    Invoke-WebRequest -Uri '$(FfmpegZipUrl)' -OutFile $zip -UseBasicParsing -TimeoutSec 300" />
      <Ps1Lines Include="    Write-Host '[FetchTools] Extracting ffmpeg...'" />
      <Ps1Lines Include="    Add-Type -AssemblyName System.IO.Compression.FileSystem" />
      <Ps1Lines Include="    [System.IO.Compression.ZipFile]::ExtractToDirectory($zip, $unz)" />
      <Ps1Lines Include="    $found = Get-ChildItem $unz -Recurse -Filter ffmpeg.exe | Select-Object -First 1" />
      <Ps1Lines Include="    if ($found) { Copy-Item $found.FullName $ff -Force; Write-Host '[FetchTools] ffmpeg.exe extracted successfully.' } else { Write-Host '[FetchTools] ERROR: ffmpeg.exe not found in zip archive.' }" />
      <Ps1Lines Include="  } catch { Write-Host (&quot;[FetchTools] WARNING: Failed to download or extract ffmpeg: {0}&quot; -f $_.Exception.Message) }" />
      <Ps1Lines Include="  finally {" />
      <Ps1Lines Include="    if (Test-Path $zip) { Remove-Item $zip -Force }" />
      <Ps1Lines Include="    if (Test-Path $unz) { Remove-Item $unz -Recurse -Force }" />
      <Ps1Lines Include="  }" />
      <Ps1Lines Include="}" />
    </ItemGroup>

    <WriteLinesToFile File="$(ToolsPs1)" Lines="@(Ps1Lines)" Overwrite="true" />
  </Target>

  <!-- STEP 2: Execute the generated PowerShell script after the build is complete. -->
  <Target Name="DownloadToolsAfterBuild" AfterTargets="Build" DependsOnTargets="PrepareToolsScript" Condition="'$(OS)' == 'Windows_NT'">
    <PropertyGroup>
      <ToolsPs1Full>$(MSBuildProjectDirectory)\$(IntermediateOutputPath)download-tools.ps1</ToolsPs1Full>
    </PropertyGroup>

    <Exec
      WorkingDirectory="$(TargetDir)"
      IgnoreExitCode="true"
      Command="powershell -NoProfile -ExecutionPolicy Bypass -File &quot;$(ToolsPs1Full)&quot;" />
  </Target>

  <!-- STEP 3: Ensure all necessary directories exist in the output folder after the build. -->
  <Target Name="EnsureOutputDirs" AfterTargets="Build">
    <MakeDir Directories="$(TargetDir)sounds" />
    <MakeDir Directories="$(TargetDir)lang" />
    <!-- This directory must match the default 'TmpDir' value in Settings.cs -->
    <MakeDir Directories="$(TargetDir)sympho_tmp" />
  </Target>

</Project>